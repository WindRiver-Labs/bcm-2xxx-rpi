		Raspberry Pi Board Support Package

1. About this document
======================

This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River
Linux and the wrlinux layer.

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the bcm-2xxx-rpi layer
-------------------------------
This layer should be added to bblayers.conf. This is done automatically
when using the Wind River setup.sh wrapper.

License
-------
Copyright (C) 2019 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+-------------+-------------+
  | valid/distro |   wrlinux   | wrlinux-cgl | wrlinux-ovp |
  +--------------+-------------+-------------+-------------+
  |    valid     |      Y      |      N      |      N      |
  +--------------+-------------+-------------+-------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype is not available for this BSP/Machine at this time.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP
along with patch descriptions use git whatchanged on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

	# cd tmp-glibc/work-shared/<bsp_name>/kernel-source
	# git whatchanged standard/base..HEAD


4. Boot Instructions
====================

It is necessary to load the DTB (device tree blob) into the target's memory
prior to booting the kernel Image. The DTB file can be found in the export
directory after building a project, or you can generate it manually with the
following commands:

To generate the DTB manually, change to the build directory, then run
the following commands:

	% bitbake -c devshell virtual/kernel
	% make broadcom\bcm2711-rpi-4-b.dtb

The dtb can then be found in the
  .../linux-<bsp_name>-<kernel type>-build/arch/arm64/boot/dts/broadcom
directory.

Typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store your network 
configuration details and kernel command line respectively. In order to
TFTP a kernel, you need, minimally, to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr
	- eth1addr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image. You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle, you will need to run
the saveenv command.

Typically, convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyS0 at 115200 baud. For the DTB
address, 0x3000000 has been used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x1000000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

4.1.1 Prepare Kernel, DTB, NFS and TFTP servers
-----------------------------------------------
The files in below example can be found in <buildprj>/tmp-glibc/deploy/images/<machine name>
and are copied to the directory of the TFTP server.

4.1.2 Set environments for booting image from network
-----------------------------------------------------

	# setenv ipaddr <board ip address>
	# setenv netmask <board netmask>
	# setenv gatewayip <gateway ip>
	# setenv serverip <server ip address>

4.1.3 Download kernel
---------------------

	# tftp 0x00080000 Image

Note:
For Raspberrypi4, there is not network in u-boot, so load kernel from SD card
	# fatload mmc 0:1 ${kernel_addr_r} Image

4.1.3 Download dtb
------------------

	# tftp 0x02600000 <Board Name>.dtb

Note:
For Raspberrypi4, there is no need to load dtb file. Because Raspberrypi special boorloader modify dtb file
on SD card after board power on, and then put the dtb at address 0x2eff5c00

4.1.4 Set bootargs and boot system
----------------------------------

	# setenv bootargs console=ttyS0,115200n8 root=/dev/nfs rw nfsroot=<nfs server>:<nfs root>,v3,tcp \
		 ip=<target IP>::<gateway>:<netmask>::eth0:off \
	# booti 0x00080000 - 0x02600000

Note:
For Raspberrypi4, please use below commands
	# fdt addr ${fdt_addr}
	# fdt resize
	# fdt get value bootargs1 /chosen bootargs
	# setenv bootargs "${bootargs1} root=/dev/nfs nfsroot=<nfs server>:<nfs root>,v3,tcp ip=dhcp"
	# booti ${kernel_addr_r} - ${fdt_addr}


5. WiFi
=======

5.1 Introduction
----------------
To use this WiFi driver, you will need a microcode (uCode) image.
The microcode is typically installed in /lib/firmware/brcm.

Since the license limitation, the firmware for rpi4 are here:

wget https://github.com/RPi-Distro/firmware-nonfree/raw/master/brcm/brcmfmac43455-sdio.bin
wget https://github.com/RPi-Distro/firmware-nonfree/raw/master/brcm/brcmfmac43455-sdio.clm_blob
wget https://github.com/RPi-Distro/firmware-nonfree/raw/master/brcm/brcmfmac43455-sdio.txt 

Then you need to copy above download files to directory "/lib/firmware/brcm/" of rootfs.

Note: Because WIFI driver loads the configure file named with the specific board information,
      create a link file named brcmfmac43455-sdio.raspberrypi,4-model-b.txt with below command
      to avoid outputing error log when system boots up.

	# ln -s brcmfmac43455-sdio.txt brcmfmac43455-sdio.raspberrypi,4-model-b.txt

5.2 Usage and verification
--------------------------

Execute the following commands to validate the WIFI eature:

	# ifconfig wlan<idx> up
	# iw wlan<idx> scan
	# iw dev wlan<idx> connect <AP essid>
	# dhclient wlan<idx>
	# ping <AP address> -i wlan<idx> -c 5

6. Bluetooth
============

6.1 Introduction
----------------
Bluetooth functionality is provided by a UART P1011. To use this Bluetooth driver,
you will need a microcode (uCode) image. Since the license limitation, the firmware
for rpi4 is here:

wget https://github.com/RPi-Distro/bluez-firmware/raw/master/broadcom/BCM4345C0.hcd

Then you need to copy above download file to directory "/lib/firmware/brcm/" of rootfs.

6.2 Usage and verification
--------------------------
The following drivers must be loaded:

	# hciattach /dev/ttyAMA0 bcm43xx 921600 noflow -

Once loaded, the sysfs entry below should appear:

	/sys/module/bluetooth

Device discovery:

	# hciconfig -a
	# hciconfig hci0 up
	Enable another BT device and ensure it is visable to others.
	# hcitool -i hci0 scan

Establish connection:

	# hcitool dc <BT device address>
	# hcitool cc <BT device address>
	# hcitool con

Ping:
	# l2ping -c 5 <BT device address>

7. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

http://www.yoctoproject.org/docs/2.6/mega-manual/mega-manual.html#creating-partitioned-images-using-wic

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp-glibc/deploy/images/<bsp name>/, such as:

tmp-glibc/deploy/images/bcm-2xxx-rpi4/wrlinux-image-std-bcm-2xxx-rpi4.wic

7.1 Run wic image
-----------------

Insert the SD card into SD slot on Raspberrypi 4b board, and then power on.
Default boot commands and parameters work fine, there is no need to set them again.

8. Audio
========

To enable the audio device, the config.txt should contain 'dtparam=audio=on'.

To load audio driver in WRLinux:
$ sudo modprobe snd-bcm2835

8.1 Audio playback(headphone jack)
----------------------------------

Verify with below command

	# speaker-test -c2 -twav

8.2 Audio playback(HDMI)
------------------------

Verify with below command

	# speaker-test -c2 -twav -Dhw:0,1

Note:
The following command is used to switch the audio output

	# amixer cset numid=3 <output idx>

Here the output is being set to 2, which is HDMI. Setting the output to 1
switches to analogue (headphone jack). The default setting is 0 which is
automatic.

9. Video camera
===============

The Video camera support on RPI 4 is with V4L2 drivers. To enable the video
device, the config.txt should contain:

	start_x=1
	gpu_mem=128

gpu_mem could select others value like 256 or 512.

To load video driver in WRLinux:
$ sudo modprobe bcm2835-v4l2

To run camera test case with below commands:
# export DISPLAY=:0
# gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,format=YUY2,width=320,height=240 ! videoconvert ! autovideosink

10. SPI and I2C
===============

To enable the SPI and I2C device, some parameters need to set in the config.txt:

Enables SPI driver with 'dtparam=spi=on'
Enables I2C on GPIO pins with 'dtparam=i2c_arm=on'
Enables I2S audio hardware with 'dtparam=i2s=on'

And run the below command to load i2c driver mode:

$ sudo modprobe i2c-dev

11. Graphics Layer
==================

This layer includes recipes of graphic and multimedia feature.
If customer wants to enable GPU hardware accelerator, please add this
layer before building image. With this layer, customer can get a
image with matchbox desktop based on x11 protocol.

The following descripion show how to use the graphics layer.

11.1 Setup project with distro wrlinux-graphics
----------------------------------------------

Detail command as below:

	# <path-of-wrlinux-x>/setup.sh --machine bcm-2xxx-rpi4 --distro wrlinux-graphics --dl-layers --all-layers --accept-eula=yes

11.2 Add Graphics Layer
-----------------------

Run below command to add the graphics layer

	# cd <path-of-project>
	# . environment-setup-x86_64-wrlinuxsdk-linux
	# . oe-init-build-env
	# bitbake-layers add-layer <path-of-bsplayer>/rpi-graphics

11.3 Build Image
----------------

During building project, there will be some packages needing to be downloaded and some of them need license flag.
So, firstly, it is need to do below modification in <path-of-project>/build/conf/local.conf file.
 - set BB_NO_NETWORK as '0'
 - add LICENSE_FLAGS_WHITELIST = "commercial"

And then run below command to build image

	# bitbake wrlinux-image-std-sato

11.4 Verify Graphic feature
---------------------------

Connect with HDMI0 port(J6), mode 1680x1050@60.0
Run below command:

	# es2gears_x11

Output as below:

	EGL_VERSION = 1.4
	vertex shader info:
	fragment shader info:
	info:
	303 frames in 5.0 seconds = 60.503 FPS
	300 frames in 5.0 seconds = 59.964 FPS
	300 frames in 5.0 seconds = 59.952 FPS
	300 frames in 5.0 seconds = 59.952 FPS
	300 frames in 5.0 seconds = 59.952 FPS
	300 frames in 5.0 seconds = 59.952 FPS

12. LCD
=======

Raspberrypi4 B platform supports 7 inch HDMI LCD Display-B with
resolution 800x480 and capacitive touch control. To enable LCD feature,
it is need to add below configuration parameter in config.txt file.

	hdmi_force_hotplug=1
	max_usb_current=1
	hdmi_group=2
	hdmi_mode=1
	hdmi_mode=87
	hdmi_cvt 800 480 60 6 0 0 0
