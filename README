        Raspberry Pi 3 Boards


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with linux-yocto kernel.


Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.


Building the bcm-2xxx-rpi layer
-------------------------------
This layer should be added to bblayers.conf. This is done automatically
when using the Wind River setup.sh wrapper.

License
-------
Copyright (C) 2019 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+-------------+-------------+
  | valid/distro |   wrlinux   | wrlinux-cgl | wrlinux-ovp |
  +--------------+-------------+-------------+-------------+
  |    valid     |      Y      |      N      |      N      |
  +--------------+-------------+-------------+-------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype is not available for this BSP/Machine at this time.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP
along with patch descriptions use git whatchanged on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

	# cd tmp-glibc/work-shared/<bsp_name>/kernel-source
	# git whatchanged standard/base..HEAD


4. Boot Instructions
====================

It is necessary to load the DTB (device tree blob) into the target's memory
prior to booting the kernel Image. The DTB file can be found in the export
directory after building a project, or you can generate it manually with the
following commands:

To generate the DTB manually, change to the build directory, then run
the following commands:

	% bitbake -c devshell virtual/kernel
	% make broadcom\bcm2710-rpi-3-b-plus.dtb

The dtb can then be found in the
  .../linux-<bsp_name>-<kernel type>-build/arch/arm/boot/dts
directory.

Typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store your network 
configuration details and kernel command line respectively. In order to
TFTP a kernel, you need, minimally, to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr
	- eth1addr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image.  You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle, you will need to run
the saveenv command.

Typically, convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyS0 at 115200 baud. For the DTB
address, 0x3000000 has been used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x1000000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate $othbootargs;tftp $loadaddr $bootfile; \
tftp $fdtaddr $fdtfile;booti $loadaddr - $fdtaddr
bootargs=earlyprintk console=tty0 console=ttyS0,115200
usbethaddr=00:04:9F:02:00:FD
loadaddr=0x1000000
fdtaddr=0x3000000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=eth0
bootfile=Image
fdtfile=bcm2710-rpi-3-b-plus.dtb
rootpath=/tftpboot/rootfs

4.2 Boot from SD card
---------------------

4.2.1 Deploy kernel, DTB image and file syetem image into your SD card
-----------------------------------------------------------

Refer to bootloader/README for information on how to make am SD card bootable.
Deploy the kernel image, DTB image and file system image as follows:

	# mount /dev/mmcblk0p2 /mnt/sd
	# tar xfj wrlinux-image-glibc-std-bcm-2xxx-rpi.tar.bz2 --numeric-owner -C /mnt/sd
	# umount /mnt/sd
	# mount /dev/mmcblk0p1 /mnt/sd
	# cp path_to_Image /mnt/sd/boot
	# cp path_to_bcm2710-rpi-3-b-plus.dtb /mnt/sd/boot
	# umount /mnt/sd

4.2.2 Set u-boot environment variables and boot from SD card
------------------------------------------------------------

Run the following command to load the kernel image and DTB image:

	=> setenv bootargs earlyprintk console=tty0 console=ttyS0,115200 root=/dev/mmcblk0p2 rw rootwait
	=> mmc rescan
	=> fatload mmc 0 0x1000000 Image
	=> fatload mmc 0 0x3000000 bcm2710-rpi-3-b-plus.dtb
	=> booti 0x1000000 - 0x3000000

5. WiFi
=======

5.1 Introduction
----------------
To use this WiFi driver, you will need a microcode (uCode) image.
The microcode is typically installed in /lib/firmware/brcm.

Since the license limitation, the firmware for 3b+ are here:

wget https://github.com/RPi-Distro/firmware-nonfree/raw/master/brcm/brcmfmac43455-sdio.bin
wget https://github.com/RPi-Distro/firmware-nonfree/raw/master/brcm/brcmfmac43455-sdio.clm_blob
wget https://github.com/RPi-Distro/firmware-nonfree/raw/master/brcm/brcmfmac43455-sdio.txt 

Then you need to copy above download files to directory "/lib/firmware/brcm/" of rootfs.

5.2 Usage and verification
--------------------------
         # rfkill unblock wlan
         # ifconfig wlan0 up
         # iw dev wlan0 scan |grep test
	   ESSID:"test"
         # iw dev wlan0 connect test
         # killall dhclient
         # ifconfig wlan0 192.168.43.100
         # ping 192.168.43.1 -I wlan0

6. Bluetooth
============

6.1 Introduction
----------------
Bluetooth functionality is provided by a UART P1011. To use this Bluetooth driver,
you will need a microcode (uCode) image. Since the license limitation, the firmware
for 3b+ is here:

wget https://github.com/RPi-Distro/bluez-firmware/raw/master/broadcom/BCM4345C0.hcd

Then you need to copy above download file to directory "/lib/firmware/brcm/" of rootfs.

6.2 Usage and verification
--------------------------
The following drivers must be loaded:

	$ /usr/bin/hciattach /dev/ttyAMA0 bcm43xx 921600 noflow -

Once loaded, the sysfs entry below should appear:

	/sys/module/bluetooth

Device discovery:

	$ hciconfig <BT DEVICE NAME> up
	$ hciconfig <BT DEVICE NAME> noscan
	$ hciconfig <BT DEVICE NAME>
		Expected UP_RUNNING
	Enable another BT device and ensure it is visable to others.
	$ hcitool scan --flush
	$ hciconfig <BT DEVICE NAME> piscan

Service discovery:
	$ sdptool browse <BT_2_BD_ADDR>

Establish connection:

	$ hcitool dc <BT_ADDR>
	$ hcitool cc <BT_ADDR>
	$ hcitool con
	$ hcitool dc <BT_ADDR>

Ping:
	$ l2ping -c 5 <BT_ADDR>

7. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

http://www.yoctoproject.org/docs/2.6/mega-manual/mega-manual.html#creating-partitioned-images-using-wic

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp-glibc/deploy/images/<bsp name>/ ,such as:

tmp-glibc/deploy/images/bcm-2xxx-rpi/wrlinux-image-glibc-small-bcm-2xxx-rpi.wic

Then user can write the output image to a SD card:

Since this BSP can not directly integrate the Vendor's necessary series firmwares.
WIC image only contains kernel, dtb and rootfs. We still need to write back the Vendor's firmware and
u-boot.bin to the SD card after burning the WIC image.

7.1 Burn image to an SD card
-------------------------

To burn the WIC image to an SD card, please first backup the boot partition content of
the SD card, which includes the Vendor's firmware and u-boot.bin (about how to update u-boot.bin
please refer to below chapter "11. Raspberry's pre-built image"):

# dd if=/dev/sd_partition_boot of=boot.img

Then execute the following commands:

# dd if=wrlinux-image-glibc-small-bcm-2xxx-rpi.wic of=/dev/your_sd_dev
# dd if=boot.img of=/dev/sd_partition_boot

7.2 Set u-boot env
-----------------

The board can boot automatically by setting the following u-boot environment 
variables:

=> setenv bootfile Image; setenv fdtfile bcm2710-rpi-3-b-plus.dtb; setenv loadaddr
1000000; setenv fdtaddr 3000000;

=> setenv bootargs "root=/dev/mmcblk0p2 rw rootdelay=5 earlyprintk console=tty0
console=ttyS0,115200"

=> setenv bootcmd 'ext2load mmc 0:2 $loadaddr /boot/$bootfile; ext2load mmc 0:2
$fdtaddr /boot/$fdtfile; booti $loadaddr - $fdtaddr';

=> saveenv; run bootcmd;


8. Audio
========

To enable the audio device, the config.txt should contain 'dtparam=audio=on'.

To load audio driver in WRLinux:
$ sudo modprobe snd-bcm2835

The following command, entered in the command line, will switch the audio output
to HDMI:

# amixer cset numid=3 2

Here the output is being set to 2, which is HDMI. Setting the output to 1
switches to analogue (headphone jack). The default setting is 0 which is
automatic.

9. Video camera
===============

The Video camera support on RPI 3 is with V4L2 drivers. To enable the video
device, the config.txt should contain:

	start_x=1
	gpu_mem=128

gpu_mem could select others value like 256 or 512.

To load video driver in WRLinux:
$ sudo modprobe bcm2835-v4l2

10. SPI and I2C
===============

To enable the SPI and I2C device, some parameters need to set in the config.txt:

Enables SPI driver with 'dtparam=spi=on'
Enables I2C on GPIO pins with 'dtparam=i2c_arm=on'
Enables I2S audio hardware with 'dtparam=i2s=on'

And run the below command to load i2c driver mode:

$ sudo modprobe i2c-dev

11. Raspberry's pre-built image
===============================

11.1. Raspberry's boot partition
--------------------------------

This boot partition contains pre-compiled binaries of the
current Raspberry Pi bootloader/GPU firmware, like start*.elf, fixup*.dat
and bootcode.bin are the GPU firmwares and bootloader, which are necessary for booting Raspberry Pi
target board. This firmwares could get picked from the link:

 https://github.com/raspberrypi/firmware/tree/master/boot

and copy above boot directory to the of boot partition prepared SD card, about how to prepare the
SD card, see the link:
https://www.raspberrypi.org/documentation/installation/sd-cards.md

11.2. Update u-boot.bin
-----------------------

The RPi binary firmware can boot U-Boot just like it can boot a downstream kernel.
As such, you can simply copy u-boot.bin to the boot partition of the SD card.

This u-boot.bin is under the wrlinux built directory: "tmp-glibc/deploy/images/bcm-2xxx-rpi"

Assume here, the SD card has installed with Raspbian firmware, if not please
refer to:
https://www.raspberrypi.org/documentation/installation/installing-images/README.md

Update u-boot.bin:

$ mount /dev/sdb1 /mnt/tmp
$ cp u-boot.bin /mnt/tmp/
$ echo 'kernel=u-boot.bin' >> /mnt/tmp/config.txt
$ echo 'enable_uart=1' >> /mnt/tmp/config.txt
$ echo 'arm_64bit=1' >> /mnt/tmp/config.txt
$ umount /mnt/tmp

In the commands above, you may need to replace "/dev/sdb1" with a different
device filename, depending on where your SD card reader shows up. cat
/proc/partitions should help you locate the correct device filename.

